// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String             @id @default(uuid())
  firstName          String?
  userName           String?            @unique
  email              String             @unique
  googleId           String?            @unique
  lastName           String?
  picture            String?            @default("userAVI/npc.jpeg")
  password           String?
  latitude           Float?
  longitude          Float?
  city               String?
  radius             Int?
  NotificationsCount Int                @default(0)
  phoneNumber        String?
  isOnline           Boolean            @default(false)
  Activity           Activity[]
  ClubMembers        ClubMembers[]
  ClubsAdmins        ClubsAdmins[]
  DirectMessages     DirectMessages[]
  Discussions        Discussions[]
  DiscussionsUsers   DiscussionsUsers[]
  Friends            Friends[]          @relation("friend")
  Friendships        Friends[]          @relation("user")
  LendingTable       LendingTable[]
  Notifications      Notifications[]
  Posts              Posts[]
  PostsUsers         PostsUsers[]
  UserBooks          UserBooks[]
  UserGenre          UserGenre[]
  UserHobbies        UserHobbies[]
  UserPictures       UserPictures[]
  User_Places        UserPlaces[]
  Conversations      Conversations[]    @relation("conversationMembers")
}

model Books {
  id          String        @id @default(uuid())
  title       String        @unique
  subTitle    String?
  pubDate     String?
  pageCount   Int?
  author      String
  selfLink    String?
  description String?
  content     String?
  image       String?
  mainGenre   String?
  buyLink     String?
  viewAbility String?
  rating      Float?
  nyTimesReq  Boolean       @default(false)
  ISBN10      String        @unique
  BookAccess  BookAccess[]
  Activity    Activity[]
  Clubs_Books ClubsBooks[]
  Discussions Discussions[]
  Genre       Genre[]
  Posts       Posts[]
  UserBooks   UserBooks[]
}

model UserBooks {
  id             String          @id @default(uuid())
  wishlist       Boolean         @default(false)
  lendingLibrary Boolean         @default(false)
  booksId        String
  userId         String
  starRating     Float?
  review         String?
  read           Boolean         @default(false)
  reading        Boolean         @default(false)
  LendingTable   LendingTable[]
  UserBookNotes  UserBookNotes[]
  Books          Books           @relation(fields: [booksId], references: [id])
  User           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  Activity       Activity[]

  @@unique([userId, booksId], name: "userId_bookId")
}

model Activity {
  id          String        @id @default(uuid())
  userId      String
  type        String
  bookId      String?
  userBookId  String? // Add this field
  createdAt   DateTime      @default(now())
  placeId     String?
  description String?
  Books       Books?        @relation(fields: [bookId], references: [id])
  place       PlacesToRead? @relation(fields: [placeId], references: [id])
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userBook    UserBooks?    @relation(fields: [userBookId], references: [id])
}

model BookAccess {
  id           String  @id @default(uuid())
  downloadLink String?
  acsToken     String?
  pdfLink      String?
  pdfAcsToken  String?
  infoLink     String?
  canVolLink   String?
  bookId       String
  Books        Books   @relation(fields: [bookId], references: [id])
}

model UserGenre {
  id     String @id @default(uuid())
  genre  String
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model UserHobbies {
  id      String @id @default(uuid())
  hobbies String
  userId  String
  User    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserPictures {
  id     String  @id @default(uuid())
  url    String
  userId String
  type   String?
  User   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserBookNotes {
  id         String    @id @default(uuid())
  note       String
  created    DateTime  @default(now())
  page       Int?
  mentionId  String?
  userBookId String
  UserBooks  UserBooks @relation(fields: [userBookId], references: [id])
}

model UserPlaces {
  id            String       @id @default(uuid())
  userId        String?
  placeId       String
  Rating        Float?
  CheckIns      Int?
  favorite      Boolean      @default(false)
  googlePlaceId String
  private       Boolean      @default(false)
  text          String?
  place         PlacesToRead @relation(fields: [placeId], references: [id])
  user          User?        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, placeId], name: "userId_placeId")
}

model PlacesToRead {
  id              String           @id @default(uuid())
  nickName        String?
  Private         Boolean          @default(false)
  Lat             Float?
  Long            Float?
  googlePlaceId   String           @unique
  location        String
  name            String?
  placeEditorial  String?
  rating          Float?
  types           String[]
  website         String?
  phone           String?
  Activity        Activity[]
  LendingTableIn  LendingTable[]   @relation("inPlace")
  LendingTableOut LendingTable[]   @relation("outPlace")
  PlacesPictures  PlacesPictures[]
  userPlaces      UserPlaces[]
}

model PlacesPictures {
  id          String       @id @default(uuid())
  url         String
  googlePic   Boolean?
  description String?
  placeId     String
  place       PlacesToRead @relation(fields: [placeId], references: [id])
}

model Notifications {
  id         String   @id @default(uuid())
  socketIOid String?
  createdAt  DateTime @default(now())
  userId     String
  body       String
  recipient  String?
  type       String?
  offline    Boolean?
  read       Boolean?
  User       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Conversations {
  id        String           @id @default(uuid())
  updatedAt DateTime         @default(now())
  title     String           @default("Conversation")
  messages  DirectMessages[] @relation("conversation")
  members   User[]           @relation("conversationMembers")
}

model DirectMessages {
  id             String        @id @default(uuid())
  createdAt      DateTime      @default(now())
  message        String
  senderId       String
  conversationId String
  isRead         Boolean       @default(false)
  conversation   Conversations @relation("conversation", fields: [conversationId], references: [id])
  sender         User          @relation(fields: [senderId], references: [id])

  @@index([createdAt])
}

model Genre {
  id      String @id @default(uuid())
  booksId String
  genre   String
  Books   Books  @relation(fields: [booksId], references: [id])
}

model bookdata {
  asin       String
  author     String
  image_url  String
  rating     String
  title      String  @unique
  url        String
  categories String
  ISBN10     String  @id
  processed  Boolean @default(false)
}

model Clubs {
  id          String        @id @default(uuid())
  name        String        @unique
  description String?
  image       String?
  ClubAdmins  ClubsAdmins[]
  clubMembers ClubMembers[]
  Clubs_Books ClubsBooks[]
  Discussions Discussions[]
}

model ClubsAdmins {
  id     String @id @default(uuid())
  userId String
  clubId String
  Club   Clubs  @relation(fields: [clubId], references: [id])
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, clubId], name: "userId_clubId")
}

model ClubsBooks {
  id          String  @id @default(uuid())
  booksId     String
  clubId      String
  currentBook Boolean @default(false)
  description String?
  startDate   String?
  endDate     String?
  Books       Books   @relation(fields: [booksId], references: [id])
  Clubs       Clubs   @relation(fields: [clubId], references: [id])
}

model ClubMembers {
  id     String @id @default(uuid())
  userId String
  clubId String
  club   Clubs  @relation(fields: [clubId], references: [id])
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, clubId], name: "userId_clubId")
}

model Discussions {
  id               String             @id @default(uuid())
  userId           String
  title            String
  clubsId          String
  bookId           String?
  thumbsDown       Int                @default(0)
  thumbsUp         Int                @default(0)
  createdAt        DateTime           @default(now())
  image            String?
  bookTitle        String?
  timeline         String?
  books            Books?             @relation(fields: [bookId], references: [id])
  clubs            Clubs              @relation(fields: [clubsId], references: [id])
  creator          User               @relation(fields: [userId], references: [id])
  DiscussionsUsers DiscussionsUsers[]
  Posts            Posts[]
}

model DiscussionsUsers {
  id           String      @id @default(uuid())
  discussionId String
  userId       String
  thumbsUp     Boolean     @default(false)
  thumbsDown   Boolean     @default(false)
  discussion   Discussions @relation(fields: [discussionId], references: [id])
  user         User        @relation(fields: [userId], references: [id])
}

model Posts {
  id            String       @id @default(uuid())
  userId        String
  body          String
  discussionsId String
  createdAt     DateTime     @default(now())
  thumbsDown    Int          @default(0)
  thumbsUp      Int          @default(0)
  BookId        String?
  Books         Books?       @relation(fields: [BookId], references: [id])
  discussion    Discussions  @relation(fields: [discussionsId], references: [id])
  user          User         @relation(fields: [userId], references: [id])
  PostsUsers    PostsUsers[]
}

model PostsUsers {
  id         String  @id @default(uuid())
  postId     String
  userId     String
  thumbsUp   Boolean @default(false)
  thumbsDown Boolean @default(false)
  post       Posts   @relation(fields: [postId], references: [id])
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Friends {
  id        String  @id @default(uuid())
  userId    String
  friendId  String
  isFriend  Boolean @default(false)
  confirmed Boolean @default(true)
  friend    User    @relation("friend", fields: [friendId], references: [id], onDelete: Cascade)
  user      User    @relation("user", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, friendId], name: "userId_friendId")
}

model LendingTable {
  id              String        @id @default(uuid())
  lenderId        String
  borrowerId      String
  LenderReview    String?
  LenderRating    Int?
  BorrowRating    Int?
  BorrowReview    String?
  DateInPlanned   String?
  DateIn          String?
  Borrowed        Boolean       @default(false)
  Returned        Boolean       @default(false)
  Datebackplanned String?
  DateBack        String?
  inPlaceId       String?
  outPlaceId      String?
  InTime          String?
  InDate          String?
  OutTime         String?
  OutDate         String?
  BorrowID        User          @relation(fields: [borrowerId], references: [id])
  placeIn         PlacesToRead? @relation("inPlace", fields: [inPlaceId], references: [id])
  LenderBookId    UserBooks     @relation(fields: [lenderId], references: [id])
  placeOut        PlacesToRead? @relation("outPlace", fields: [outPlaceId], references: [id])
}

model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)
}

model us_gaz {
  id        Int     @id(map: "pk_us_gaz") @default(autoincrement())
  seq       Int?
  word      String?
  stdword   String?
  token     Int?
  is_custom Boolean @default(true)
}

model us_lex {
  id        Int     @id(map: "pk_us_lex") @default(autoincrement())
  seq       Int?
  word      String?
  stdword   String?
  token     Int?
  is_custom Boolean @default(true)
}

model us_rules {
  id        Int     @id(map: "pk_us_rules") @default(autoincrement())
  rule      String?
  is_custom Boolean @default(true)
}
